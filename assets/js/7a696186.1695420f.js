"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[168],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,y=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(y,i(i({ref:t},c),{},{components:n})):r.createElement(y,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Emit only selected blocks",sidebar_label:"Emit selected blocks"},i=void 0,l={unversionedId:"advanced/emit-blocks",id:"advanced/emit-blocks",title:"Emit only selected blocks",description:"If you don't want to have generated all the CRUD API with all resolvers, arguments, inputs, outputs, models, etc., you can provide an emitOnly generator option, which accepts an array of values",source:"@site/../docs/advanced/emit-blocks.md",sourceDirName:"advanced",slug:"/advanced/emit-blocks",permalink:"/docs/advanced/emit-blocks",draft:!1,editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/emit-blocks.md",tags:[],version:"current",frontMatter:{title:"Emit only selected blocks",sidebar_label:"Emit selected blocks"},sidebar:"docs",previous:{title:"GraphQL Federation",permalink:"/docs/advanced/federation"},next:{title:"Applying decorators",permalink:"/docs/advanced/additional-decorators"}},s={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you don't want to have generated all the CRUD API with all resolvers, arguments, inputs, outputs, models, etc., you can provide an ",(0,a.kt)("inlineCode",{parentName:"p"},"emitOnly")," generator option, which accepts an array of values: ",(0,a.kt)("inlineCode",{parentName:"p"},"enums"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"models"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"crudResolvers"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"relationResolvers"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"inputs")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"outputs"),", e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{3}","{3}":!0},'generator typegraphql {\n  provider = "typegraphql-prisma"\n  emitOnly = ["models", "inputs"]\n}\n')),(0,a.kt)("p",null,"This way the generator will emit only the parts that you're interested in, like models and inputs but without outputs or resolvers."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Be aware that e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," requires ",(0,a.kt)("inlineCode",{parentName:"p"},"enums")," in order to compile.\nSo sometimes you will receive more generated items than only those listed in ",(0,a.kt)("inlineCode",{parentName:"p"},"emitOnly"),", especially when it comes to ",(0,a.kt)("inlineCode",{parentName:"p"},"crudResolvers")," that requires almost all the pieces being generated.")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunktypegraphql_prisma_website=self.webpackChunktypegraphql_prisma_website||[]).push([[645],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return r?n.createElement(h,l(l({ref:t},d),{},{components:r})):n.createElement(h,l({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},194:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={title:"GraphQL Federation"},l="GraphQL Federation Support",o={unversionedId:"advanced/federation",id:"advanced/federation",title:"GraphQL Federation",description:"This package supports Apollo GraphQL Federation for building distributed GraphQL architectures. When federation is enabled, the generator automatically adds @key directives to your entity types based on the ID fields in your Prisma models.",source:"@site/../docs/advanced/federation.md",sourceDirName:"advanced",slug:"/advanced/federation",permalink:"/docs/advanced/federation",draft:!1,editUrl:"https://github.com/MichalLytek/typegraphql-prisma/edit/main/docs/../docs/advanced/federation.md",tags:[],version:"current",frontMatter:{title:"GraphQL Federation"},sidebar:"docs",previous:{title:"Custom operations",permalink:"/docs/advanced/custom-operations"},next:{title:"Emit selected blocks",permalink:"/docs/advanced/emit-blocks"}},s={},p=[{value:"How to enable Federation",id:"how-to-enable-federation",level:2},{value:"What it does",id:"what-it-does",level:2},{value:"Example output",id:"example-output",level:2},{value:"Single ID field",id:"single-id-field",level:3},{value:"Composite ID fields",id:"composite-id-fields",level:3},{value:"Federation Schema",id:"federation-schema",level:2},{value:"Usage with Apollo Federation",id:"usage-with-apollo-federation",level:2},{value:"Notes",id:"notes",level:2}],d={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"graphql-federation-support"},"GraphQL Federation Support"),(0,a.kt)("p",null,"This package supports ",(0,a.kt)("strong",{parentName:"p"},"Apollo GraphQL Federation")," for building distributed GraphQL architectures. When federation is enabled, the generator automatically adds ",(0,a.kt)("inlineCode",{parentName:"p"},"@key")," directives to your entity types based on the ID fields in your Prisma models."),(0,a.kt)("h2",{id:"how-to-enable-federation"},"How to enable Federation"),(0,a.kt)("p",null,"Add the ",(0,a.kt)("inlineCode",{parentName:"p"},"useFederation")," option to your Prisma generator configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"{3}","{3}":!0},'generator typegraphql {\n  provider      = "typegraphql-prisma"\n  useFederation = true\n}\n')),(0,a.kt)("h2",{id:"what-it-does"},"What it does"),(0,a.kt)("p",null,"When federation is enabled, the generator automatically:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Generates ",(0,a.kt)("inlineCode",{parentName:"strong"},"@key")," directives")," for entity definitions based on your Prisma model ID fields"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Creates federation-compatible TypeGraphQL types")," that work with Apollo Federation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Uses all ID fields")," as federation keys (supports both single and composite keys)")),(0,a.kt)("h2",{id:"example-output"},"Example output"),(0,a.kt)("h3",{id:"single-id-field"},"Single ID field"),(0,a.kt)("p",null,"For a Prisma model with a single ID field:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma"},"model User {\n  id    Int    @id @default(autoincrement())\n  email String @unique\n  name  String\n}\n")),(0,a.kt)("p",null,"The generator will create:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'@TypeGraphQL.Directive(`@key(fields: "id")`)\n@TypeGraphQL.ObjectType("User")\nexport class User {\n  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {\n    nullable: false\n  })\n  id!: number;\n\n  @TypeGraphQL.Field(_type => String, {\n    nullable: false\n  })\n  email!: string;\n\n  @TypeGraphQL.Field(_type => String, {\n    nullable: false\n  })\n  name!: string;\n}\n')),(0,a.kt)("h3",{id:"composite-id-fields"},"Composite ID fields"),(0,a.kt)("p",null,"For models with composite ID fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-prisma"},"model UserRole {\n  userId Int\n  roleId Int\n  user   User @relation(fields: [userId], references: [id])\n  role   Role @relation(fields: [roleId], references: [id])\n\n  @@id([userId, roleId])\n}\n")),(0,a.kt)("p",null,"The generator will create:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'@TypeGraphQL.Directive(`@key(fields: "userId,roleId")`)\n@TypeGraphQL.ObjectType("UserRole")\nexport class UserRole {\n  // ... generated fields\n}\n')),(0,a.kt)("h2",{id:"federation-schema"},"Federation Schema"),(0,a.kt)("p",null,"This enables your types to be used as entities in your federated GraphQL schema. The generated ",(0,a.kt)("inlineCode",{parentName:"p"},"@key")," directives tell the Apollo Federation gateway which fields can be used to uniquely identify and resolve entities across different subgraphs."),(0,a.kt)("h2",{id:"usage-with-apollo-federation"},"Usage with Apollo Federation"),(0,a.kt)("p",null,"Once generated, you can use these types in your Apollo Federation subgraph:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { buildSubgraphSchema } from '@apollo/subgraph';\nimport { buildSchema } from 'type-graphql';\nimport { User } from '@generated/type-graphql';\n\nconst schema = buildSubgraphSchema(\n  buildSchema({\n    resolvers: [\n      // Your resolvers that include User\n    ],\n    orphanedTypes: [User], // Include federated entities\n  })\n);\n")),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"@key")," directive is only added when ",(0,a.kt)("inlineCode",{parentName:"li"},"useFederation")," is explicitly set to ",(0,a.kt)("inlineCode",{parentName:"li"},"true")),(0,a.kt)("li",{parentName:"ul"},"All fields marked with ",(0,a.kt)("inlineCode",{parentName:"li"},"@id")," in your Prisma schema will be included in the federation key"),(0,a.kt)("li",{parentName:"ul"},"The feature works with both simple and composite primary keys"),(0,a.kt)("li",{parentName:"ul"},"Generated types are fully compatible with Apollo Federation specifications")))}u.isMDXComponent=!0}}]);